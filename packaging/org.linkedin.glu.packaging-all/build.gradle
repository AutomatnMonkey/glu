/*
* Copyright 2010-2010 LinkedIn, Inc
*
* Licensed under the Apache License, Version 2.0 (the "License"); you may not
* use this file except in compliance with the License. You may obtain a copy of
* the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations under
* the License.
*/

apply plugin: 'org.linkedin.cmdline'
apply plugin: 'org.linkedin.release'

configurations {
  zookeeperPackages
}

dependencies {
  zookeeperPackages spec.external.linkedinZookeeperServerPackage
}

def dependentClis = [
  ':agent:org.linkedin.glu.agent-server',
  ':agent:org.linkedin.glu.agent-cli',
  ':console:org.linkedin.glu.console-server',
  ':packaging:org.linkedin.glu.packaging-setup'
]

cmdline {
  folders = []
  dependsOn = dependentClis.collect { "${it}:package-assemble" }
  resources << fileTree(dir: rootDir, includes: ['*.txt', '*.md', '*.html'])

  replacementTokens = [
    'jetty.distribution': "jetty-distribution-${spec.versions.jetty}",
    'glu.version': version,
    'zookeeper.version': spec.versions.linkedinZookeeper
  ]
}

def dependentProjects = dependentClis.collect { evaluationDependsOn(it) }

// customizing package-assemble task to add agent cli, agent server and war
project.'package-assemble'.doFirst {
  File basePackage = project.convention.plugins.cmdline.assemblePackageFile

  dependentProjects.each { dp ->
    copy {
      from dp.convention.plugins.cmdline.assemblePackageFile
      into new File(basePackage, "${dp.name}-${version}")
    }
  }
  
  configurations.zookeeperPackages.resolve().each { zkp ->
    ant.untar(src: zkp, dest: basePackage, compression: 'gzip')
  }
}
