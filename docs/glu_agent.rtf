{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww15080\viewh14360\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b\fs28 \cf0 GLU Agent\

\b0\fs24 \cf0 \

\b\fs28 \cf0 Introduction\

\b0\fs24 \cf0 The GLU agent is an active process that needs to run on every host where applications need to be deployed. Its main role is to run GLU scrips. It is the central piece of the deployment automation platform and is the only required piece of infrastructure. It exposes a REST api and a command line (which invokes the REST api under the cover).\
\

\b\fs28 \cf0 Fabric & Agent name\

\b0\fs24 \cf0 An agent belongs to one and only one fabric (which is a group of agents) defined by its name. The agent needs to have a unique name within a fabric which by default is the canonical host name of the computer the agent is running on. You can change the agent name and the fabric when you start the agent (-n and -f options respectively).\
\

\b\fs28 \cf0 GLU Script Engine\

\b0\fs24 \cf0 The agent is a GLU script engine: it knows how to install and execute GLU scripts.\
\

\i\b \cf0 Installing a GLU script:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 1. Groovy API\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0     agent.installScript(mountPoint: '/geo/i001',\
                        scriptLocation: 'http://host:port/glu/MyGluScript.groovy',\
                        initParameters: [skeleton: 'ivy:/skeleton/jetty/1.0'])\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\i 2. Command Line\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0 agent-cli.sh -s https://localhost:12906/ -m /geo/i001 -i http://host:port/glu/MyGluScript.groovy -a "[skeleton:'ivy:/skeleton/jetty/1.0']"
\f0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\i \cf0 3. REST API\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0 PUT /mountPoint/geo/i001\
\{"args": \{"scriptLocation": "http://host:port/glu/MyGluScript.groovy",\
          "initParameters": \{"skeleton": "ivy:/skeleton/jetty/1.0"\} \} \}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\ql\qnatural\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\'95	}A GLU script gets installed on a given mount point which is the unique key which further commands will reference. \
{\listtext	\'95	}The script location is a URI which points to the location of the script (this URI must obviously be accessible from the agent, so although you can use a URI of the form 
\f1 \cf0 file://
\f0 \cf0 , it will work only if the file can be accessed (ex: local filesystem or nfs mounted file system)).\
{\listtext	\'95	}
\f1 \cf0 initParameters
\f0 \cf0  is of type metadata and is a map that the agent will make available when executing the GLU script\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 \
Note: check the javadoc for more details on the API\
\

\i\b \cf0 Executing a GLU script action\

\b0 \cf0 1. Groovy API\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0     // non blocking call\
    agent.executeAction(mountPoint: '/geo/i001', action: 'install')\
\
    // blocking until timeout\
    agent.waitForState(mountPoint: '/geo/i001', state: 'installed', timeout: '10s')\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \
\

\i 2. Command Line\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0 # non blocking\
agent-cli.sh -s https://localhost:12906/ -m /geo/i001 -e install\
\
# blocking until timeout\
agent-cli.sh -s https://localhost:12906/ -m /geo/i001 -e install -w installed -t 10s\
\
# which can be run as 2 commands\
agent-cli.sh -s https://localhost:12906/ -m /geo/i001 -e install\
agent-cli.sh -s https://localhost:12906/ -m /geo/i001 -w installed -t 10s\
\
# Shortcut for installscript + install + wait for state\
agent-cli.sh -s https://localhost:12906/ -m /geo/i001 -I http://host:port/glu/MyGluScript.groovy -a "[skeleton:'ivy:/skeleton/jetty/1.0']" -t 10s\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\i 3. REST API\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0 // executeAction\
POST /mountPoint/geo/i001\
\{"args": \{"executeAction": \{"action": "install"\} \} \}\
\
// wait for state\
GET /mountPoint/geo/i001?state=installed&timeout=10s
\f0 \
\
You can execute any action on the script that you are allowed to execute (as defined by the state machine). Note that you use the same mount point used when installing the script. If you are not allowed then you will get an error: for example, using the default state machine you cannot run the start action until you run install and configure. The command line has a shortcut to do all this in one command:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\i \cf0 4. Command Line shortcut\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0 # Shortcut for installscript + install + wait for state + configure + wait for state  + \
# start + wait for state\
agent-cli.sh -s https://localhost:12906/ -m /geo/i001 -S http://host:port/glu/MyGluScript.groovy -a "[skeleton:'ivy:/skeleton/jetty/1.0']"
\f0 \
\
You can also provide parameters to the action when you invoke it:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\i \cf0 5. Groovy API (with action args)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0     // non blocking call\
    agent.executeAction(mountPoint: '/geo/i001', action: 'install' actionArgs: [p1: 'v1'])\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \
\

\i 6. Command Line (with action args)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0 agent-cli.sh -s https://localhost:12906/ -m /geo/i001 -e install -a "[p1:'v1']"
\f0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\i \cf0 7. REST API (with action args)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0 // executeAction\
POST /mountPoint/geo/i001\
\{"args": \{"executeAction": \{"action": "install", "actionArgs": \{"p1": "v1"\} \} \} \}
\f0 \
\
They are then available through the normal groovy closure invocation functionality:\
\

\f1 def install = \{ args ->\
   if(args.p1 == 'v1')\
   \{\
     // do something\
   \}\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\i\b \cf0 Uninstalling the script\

\b0 \cf0 1. Groovy API\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0     agent.uninstallScript(mountPoint: '/geo/i001')\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\i 2. Command Line\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0 agent-cli.sh -s https://localhost:12906/ -m /geo/i001 -u"
\f0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\i \cf0 3. REST API\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0 DELETE /mountPoint/geo/i001\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \
Simply uninstall the script. Note that you cannot uninstall the script unless the state machine allows you do to so. If you are in state 'running' you first need to run stop, unconfigure and uninstall. There is a way to force uninstall irrelevant of the state of the state machine:\
\

\i 4. Groovy API (force uninstall)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0     agent.uninstallScript(mountPoint: '/geo/i001', force: true)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\i 5. Command Line (force uninstall)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0 agent-cli.sh -s https://localhost:12906/ -m /geo/i001 -u -F"\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\i 6. REST API (force uninstall)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0 DELETE /mountPoint/geo/i001?force=true\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \
\
The command line also has a shortcut to uninstall by properly running through all the phases of the state machine:\

\i 7. Command Line (shortcut)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0 \cf0 agent-cli.sh -s https://localhost:12906/ -m /geo/i001 -U"\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\b\fs28 \cf0 Capabilities\

\b0\fs24 \cf0 One of the main design goals in building the agent was the ability to write simple GLU scripts. This is achieved with the fact that the agent enhances the GLU scripts with capabilities that make it easier to write them. Most of the capabilities are made available to the GLU scripts by 'injecting' properties that the GLU scripts can simply reference (under the hood it uses groovy MOP capabilities).\
\

\i\b \cf0 log\

\i0\b0 \cf0 The 
\f1 \cf0 log
\f0 \cf0  property allows you to log any information in the agent log file. It is an instance of 
\f1 \cf0 org.slf4j.Logger
\f0 \cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1 \cf0 def configure = \{\
  log.info "this is a message logged with info level"\
  \
  log.debug "this message will be logged only if the agent is started with debug messages on"\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\i\b \cf0 params\

\i0\b0 \cf0 Every GLU script action has access to the initParameters provided at installation time through the 
\f1 \cf0 params
\f0 \cf0  property:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1 \cf0 def configure = \{\
  log.info "initParameters = $\{params\}"\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\i\b \cf0 mountPoint\

\i0\b0 \cf0 The 
\f1 \cf0 mountPoint
\f0 \cf0  on which the script was installed. In general, this property is used to install the application in a unique location (since the mountPoint is unique).\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1 \cf0 def install = \{\
  log.info "mountPoint = $\{mountPoint\}"\
  def skeleton = shell.fetch(params.skeleton) // download a tarball\
  shell.untar(skeleton, mountPoint) // will be unzipped/untarred in a unique location\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\i\b \cf0 stateManager\

\i0\b0 \cf0 An instance of 
\f1 \cf0 org.linkedin.glu.agent.api.StateManager
\f0 \cf0  which allows to access the state\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1 \cf0 def install = \{\
  log.info "current state is $\{stateManager.state\}"\
\}
\f0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\i\b \cf0 state\

\i0\b0 \cf0 Shortcut to 
\f1 \cf0 stateManager.state
\f0 \cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1 \cf0 def install = \{\
  log.info "current state is $\{state\}"\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\i\b \cf0 shell\

\i0\b0 \cf0 An instance of 
\f1 \cf0 org.linkedin.glu.agent.api.Shell
\f0 \cf0  which gives access to a lot of shell like capabilities\
* file system (see 
\f1 \cf0 org.linkedin.groovy.util.io.fs.FileSystem
\f0 \cf0 ) like ls, cp, mv, rm, tail\'85\
* process (fork, exec\'85)\
* fetch/untar to download and untar/unzip binaries (based on any URI). Note that the agent handles 
\f1 \cf0 zookeeper:/a/b/c
\f0 \cf0  style URIs and can be configured to handle 
\f1 \cf0 ivy:/a/b/1.0
\f0 \cf0  style URIs (TODO: add maven support).\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1 \cf0 def install = \{\
  def skeleton = shell.fetch(params.skeleton) // download a tarball\
  shell.untar(skeleton, mountPoint) // unzip/untar (detect zip automatically)\
  shell.rm(skeleton)\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\i\b \cf0 Accessing shell environment properties:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\i0\b0 shell.env
\f0  is a map which allows you to access all the configuration properties used when the agent booted including the ones stored in zookeeper. This allows for example to configure fabric dependent behavior. If you store the property:\
\

\f1 my.company.binary.repo.url=http://mybinaryrepo:9000/root\

\f0 \
in the configuration file (agent config) loaded in ZooKeeper for a given fabric then your scripts can use relative values:\
\

\f1 shell.fetch("$\{shell.env['my.company.binary.repo.url]/$\{params.applicationRelativePath\}"\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\i\b \cf0 timers\

\i0\b0 \cf0 An instance of 
\f1 \cf0 org.linkedin.glu.agent.api.Timers
\f0 \cf0  which allows you to set/remove timers (for monitoring for example). \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1 \cf0 def timer1 = \{\
  log.info "hello world"\
\}\
\
def install = \{\
  timers.scedule(timer: timer1, repeatFrequency: '1m')\
\}\
\
def uninstall = \{\
  timers.cancel(timer: timer1)\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\b\fs28 \cf0 OS level functionalities\

\b0\fs24 \cf0 The agent also offers some OS level functionalities\

\i\b \cf0 ps / kill\

\i0\b0 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1 \cf0 // groovy API\
agent.ps()\
agent.kill(12345, 9)\
\
// command line\
agent-cli.sh -s https://localhost:12906/ -p\
agent-cli.sh -s https://localhost:12906/ -K 1234/9\
\
// REST API\
// ps\
GET /process\
\
// kill -9 1234\
PUT /process/1234\
\{"args": \{"signal": 9\} \}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \
\

\i\b \cf0 tail / list directory content\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0\b0 \cf0 // groovy API\
agent.getFileContent(location: '/tmp') // directory content\
agent.getFileContent(location: '/tmp/foo', maxLine: 500) // file content (tail -500)\
\
// command line\
agent-cli.sh -s https://localhost:12906/ -C /tmp\
agent-cli.sh -s https://localhost:12906/ -C /tmp/foo -M 500\
\
// REST API\
GET /file/tmp\
GET /file/tmp/foo?maxLine=500\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\b\fs28 \cf0 ZooKeeper\

\b0\fs24 \cf0 By default the agent uses ZooKeeper to 'publish' its state in a central location as well as to read its configuration. Note that it is optional and ZooKeeper can be disabled in which case the whole configuration needs to be provided.\
\

\b\fs28 \cf0 Auto Upgrade\

\b0\fs24 \cf0 The agent has the capability of being able to upgrade itself\
\

\i\b \cf0 Using the command line\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\i0\b0 \cf0 agent-cli.sh -s https://localhost:12906/ -c org.linkedin.glu.agent.impl.script.AutoUpgradeScript -m /upgrade -a "[newVersion:'2.0.0',agentTar:'file:/tmp/agent-server-upgrade-2.0.0.tgz']"\
agent-cli.sh -s https://localhost:12906/ -m /upgrade -e install\
agent-cli.sh -s https://localhost:12906/ -m /upgrade -e prepare\
agent-cli.sh -s https://localhost:12906/ -m /upgrade -e commit\
agent-cli.sh -s https://localhost:12906/ -m /upgrade -e uninstall\
agent-cli.sh -s https://localhost:12906/ -m /upgrade -u\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0 \cf0 \

\i\b \cf0 Using the console\

\i0\b0 \cf0 Click on the Admin tab, then Upgrade agents.\
\

\b\fs28 \cf0 Independent lifecycle\

\b0\fs24 \cf0 The agent can be started / stopped independently of the applications that it is managing: the agent stores its state locally (and in ZooKeeper if enabled) and knows how to restore itself properly (including restarting any timers that were scheduled by glu scripts!)\
\

\b\fs28 \cf0 Requirements\

\b0\fs24 \cf0 The GLU agent requires java 1.6 to be installed on the host it is running on. As this stage only unix like hosts are supported (tested on Solaris and Mac OS X).\
\

\b\fs28 \cf0 Agent boot sequence and configuration\

\b0\fs24 \cf0 TODO: add details about the boot sequence\
ZooKeeper ephemeral node\
\

\b\fs28 \cf0 Installation\

\b0\fs24 \cf0 The agent is bundled as a self contained full package (
\f1 \cf0 org.linkedin.glu.agent\cf0 -server-x.y.z.tar.gz
\f0 ). Simply untar/unzip in a given location. The agent upgrade also comes as a package (
\f1 \cf0 org.linkedin.glu.agent\cf0 -server-upgrade-x.y.z.tar.gz
\f0 ) and is normally installed using the auto upgrade capability described above.\
\

\b\fs28 \cf0 Security\

\b0\fs24 \cf0 The agent offers a REST API over https, setup with client authentication. In this model, what is really important is for the agent to allow only the right set of clients to be able to call the API.\
\

\b\fs28 \cf0 Key setup\

\b0\fs24 \cf0 The agent comes with a default set of keys. It is strongly suggested to generate your own set of keys. See key generation document to help on creating a new set of keys (currently under 
\f1 \cf0 glu/agent/org.linkedin.glu.agent-server/src/zk-config/keys/key_generation.txt
\f0 \cf0 )\
Coming soon: a wrapper to do this\
\

\b\fs28 \cf0 Multiple agents on one host\

\b0\fs24 \cf0 You can run multiple agents on the same machine as long as you assign them different ports and different names although it is not recommended for production. This is usually used in development.}