/*
 * Copyright (c) 2011 Yan Pujante
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */



import org.linkedin.gradle.tasks.SingleArtifactTask
import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'groovy'

dependencies {
  groovy spec.external.groovy

  runtime spec.external.slf4jLog4j
  runtime spec.external.log4j
}

// this version is different from the project version because this plugin will rarely change and
// is only used internally to this project
pluginVersion = "1.0.0"
pluginName = "external-domain-classes"

def facets = """
<component name="FacetManager">
  <facet type="Spring" name="Spring">
    <configuration>
      <fileset id="Grails" name="Grails" removed="false">
        <file>file://\$MODULE_DIR\$/web-app/WEB-INF/applicationContext.xml</file>
      </fileset>
    </configuration>
  </facet>
  <facet type="web" name="GrailsWeb">
    <configuration>
      <webroots>
        <root url="file://\$MODULE_DIR\$/web-app" relative="/" />
      </webroots>
      <sourceRoots />
    </configuration>
  </facet>
</component>
"""

ideaModule {
  whenConfigured { module ->
    ['grails-app/utils', 'grails-app/controllers', 'grails-app/domain', 'grails-app/services', 'grails-app/realms', 'grails-app/taglib'].each {
      module.sourceFolders << new org.gradle.plugins.idea.model.Path("file://\$MODULE_DIR\$/${it}")
    }
    ['test/unit', 'test/integration'].each {
      module.testSourceFolders << new org.gradle.plugins.idea.model.Path("file://\$MODULE_DIR\$/${it}")
    }
  }

  withXml { root ->
    // add facets
    root.asNode().append(new XmlParser().parseText(facets))
    
    // add grails library
    root.asNode().component.find { it.@name == 'NewModuleRootManager'}.appendNode('orderEntry', [type: 'library', name: "grails-${spec.versions.grails}", level: 'application'])
  }
}

// unfortunately there is no way to 'change' where the zip file is generated!
def grailsPluginGeneratedFile = new File("./grails-${pluginName}-${pluginVersion}.zip")
def grailsPluginDistributionFile = new File("${buildDir}/distributions/${grailsPluginGeneratedFile.name}")

task "plugin" {
  outputs.file grailsPluginDistributionFile

  doLast {
    ant.exec(dir: '.', executable: "grails") {
      arg(line: "package-plugin")
    }
    ant.move(file: grailsPluginGeneratedFile, tofile: grailsPluginDistributionFile)
  }
}

task([type: SingleArtifactTask, dependsOn: 'plugin'], 'package-plugin') {
  artifactFile        = grailsPluginDistributionFile
  artifactReleaseInfo =
    [
        name:           project.name,
        extension:      'zip',
        configurations: ['zip']
    ]
}
