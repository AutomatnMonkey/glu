/*
 * Copyright (c) 2010-2011 LinkedIn, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

/**
 * Configuring for all scripts
 */

import org.linkedin.gradle.tasks.SingleArtifactTask
import org.apache.tools.ant.filters.ReplaceTokens

def gluScriptsTestProjectName = 'org.linkedin.glu.scripts.tests'

configure(subprojects.findAll {it.name != gluScriptsTestProjectName}) {
  apply plugin: 'groovy'
  apply plugin: 'org.linkedin.release'

  release {
    releaseConfigurations << 'script'
  }

  dependencies {
    compile spec.external.linkedinUtilsGroovy
    compile project(':agent:org.linkedin.glu.agent-api')
    groovy spec.external.groovy

    //testCompile project(gluScriptsTestProjectName)
    testCompile spec.external.junit
  }

  processedScriptsDir = "${buildDir}/src/main/groovy"

  // compiling only the pre-processed files
  sourceSets.main.groovy.srcDirs = [processedScriptsDir]

  // copy all the scripts in the build folder to do token replacement
  task preCompileGroovy << {
    copy {
      from('src/main/groovy') {
        filter(tokens: ['script.version': version], ReplaceTokens)
      }
      into processedScriptsDir
    }
  }

  // make sure that the compileGroovy task runs preCompileGroovy first
  tasks.getByName('compileGroovy').dependsOn('preCompileGroovy')

  def scripts = fileTree(dir: processedScriptsDir, include: '**/*.groovy')

  scripts.each { File scriptFile ->
    def baseName = scriptFile.name - '.groovy'
    task([type: SingleArtifactTask], baseName) {
      artifactFile        = scriptFile
      artifactReleaseInfo =
        [
            name:           baseName,
            extension:      'groovy',
            configurations: ['script']
        ]
    }
  }
}
