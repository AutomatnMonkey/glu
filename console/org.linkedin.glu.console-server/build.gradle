/*
 * Copyright (c) 2010-2010 LinkedIn, Inc
 * Portions Copyright (c) 2011 Yan Pujante
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

import org.linkedin.gradle.tasks.SingleArtifactTask

apply plugin: 'org.linkedin.cmdline'
apply plugin: 'org.linkedin.release'

configurations {
  jetty
}

dependencies {
  jetty spec.external.jettyPackage
}

def jettyDistribution = "jetty-distribution-${spec.versions.jetty}"
def jettyArchive = configurations.jetty.resolve().toList()[0]

def consoleWebappProject = evaluationDependsOn(':console:org.linkedin.glu.console-webapp')
def sampleWebappProject = evaluationDependsOn(':samples:org.linkedin.glu.samples.sample-webapp')

File consoleWebapp = consoleWebappProject.tasks.getByPath('package-war').artifactFile
File sampleWebapp = sampleWebappProject.tasks.getByPath('war').archivePath

def scriptProjects =
  rootProject.childProjects.scripts.childProjects.values().collect { evaluationDependsOn(it.path) }

cmdline {
  folders = []

  dependsOn = [
    ':console:org.linkedin.glu.console-webapp:war',
    ':samples:org.linkedin.glu.samples.sample-webapp:war',
    *scriptProjects.collect { "${it.path}:scripts"}
  ]

  replacementTokens = [
    'version': version,
    'jetty.distribution': jettyDistribution,
    'jetty.archive': jettyArchive.name,
    'console.webapp': consoleWebapp.name,
    'sample.webapp': sampleWebapp.name
  ]

  // licenses
  resources << [ packageIncludes ]

  // console.war
  resources << [
    from: consoleWebapp,
    into: new File(assemblePackageFile, 'glu/repository/wars'),
    replaceTokens: false
  ]

  // sample-webapp.war
  resources << [
    from: sampleWebapp,
    into: new File(assemblePackageFile, 'glu/repository/wars'),
    replaceTokens: false
  ]

  // keys
  resources << [
    from: consoleKeys,
    into: new File(assemblePackageFile, 'keys'),
    replaceTokens: false
  ]

  // jetty archive
  resources << [
    from: jettyArchive,
    into: new File(assemblePackageFile, 'glu/repository/tgzs'),
    replaceTokens: false
  ]

  // scripts
  scriptProjects.each { scriptProject ->
    scriptProject.tasks.withType(SingleArtifactTask.class).each { t ->
      resources << [
        from: t.artifactFile,
        into: new File(assemblePackageFile, "glu/repository/scripts/${scriptProject.name}-${scriptProject.version}"),
        replaceTokens: false
      ]
    }
  }
}
